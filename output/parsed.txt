Declaration INTEGER count ; TYPE_FLOAT IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMICOLON TYPE_STRING IDENTIFIER ASSIGN_OP STR_CONST SEMICOLON TYPE_INTEGER IDENTIFIER LEFT_BRACKET NUM_CONST RIGHT_BRACKET SEMICOLON COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; TYPE_STRING IDENTIFIER ASSIGN_OP STR_CONST SEMICOLON TYPE_INTEGER IDENTIFIER LEFT_BRACKET NUM_CONST RIGHT_BRACKET SEMICOLON COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; TYPE_INTEGER IDENTIFIER LEFT_BRACKET NUM_CONST RIGHT_BRACKET SEMICOLON COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; TYPE_FLOAT IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMICOLON TYPE_STRING IDENTIFIER ASSIGN_OP STR_CONST SEMICOLON TYPE_INTEGER IDENTIFIER LEFT_BRACKET NUM_CONST RIGHT_BRACKET SEMICOLON COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; TYPE_STRING IDENTIFIER ASSIGN_OP STR_CONST SEMICOLON TYPE_INTEGER IDENTIFIER LEFT_BRACKET NUM_CONST RIGHT_BRACKET SEMICOLON COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; TYPE_INTEGER IDENTIFIER LEFT_BRACKET NUM_CONST RIGHT_BRACKET SEMICOLON COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; TYPE_FLOAT IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER SEMICOLON TYPE_STRING IDENTIFIER ASSIGN_OP STR_CONST SEMICOLON TYPE_INTEGER IDENTIFIER LEFT_BRACKET NUM_CONST RIGHT_BRACKET SEMICOLON COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; TYPE_STRING IDENTIFIER ASSIGN_OP STR_CONST SEMICOLON TYPE_INTEGER IDENTIFIER LEFT_BRACKET NUM_CONST RIGHT_BRACKET SEMICOLON COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; TYPE_INTEGER IDENTIFIER LEFT_BRACKET NUM_CONST RIGHT_BRACKET SEMICOLON COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; COMMENT TYPE_INTEGER IDENTIFIER LEFT_PAREN TYPE_INTEGER IDENTIFIER COMMA TYPE_INTEGER IDENTIFIER RIGHT_PAREN LEFT_CURLY TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { TYPE_CHARACTER IDENTIFIER ASSIGN_OP CHAR_CONST SEMICOLON RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; RIGHT_CURLY TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } TYPE_INTEGER KW_MAIN LEFT_PAREN RW_VOID RIGHT_PAREN LEFT_CURLY COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { COMMENT IDENTIFIER ASSIGN_OP KW_INPUT LEFT_PAREN STR_CONST COMMA TYPE_INTEGER RIGHT_PAREN SEMICOLON COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; COMMENT KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER RIGHT_PAREN SEMICOLON KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA IDENTIFIER COMMA IDENTIFIER RIGHT_PAREN SEMICOLON COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; COMMENT IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; IDENTIFIER ASSIGN_OP NUM_CONST ADD_OP NUM_CONST SUB_OP NUM_CONST MUL_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; IDENTIFIER ASSIGN_OP NUM_CONST REL_EQ NUM_CONST ADD_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; IDENTIFIER ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y ASSIGN_OP IDENTIFIER SEMICOLON IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; IDENTIFIER ASSIGN_OP LEFT_PAREN IDENTIFIER ADD_OP IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN SEMICOLON IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; IDENTIFIER ADD_ASSIGN NUM_CONST SEMICOLON IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; IDENTIFIER UNARY_INC SEMICOLON COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; COMMENT KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { KW_IF LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; RIGHT_CURLY RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE KW_IF LEFT_PAREN IDENTIFIER REL_LT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; RIGHT_CURLY KW_ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE KW_IF LEFT_PAREN IDENTIFIER REL_EQ NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; RIGHT_CURLY KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } KW_ELSE LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; RIGHT_CURLY COMMENT KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { KW_FOR LEFT_PAREN TYPE_INTEGER IDENTIFIER ASSIGN_OP NUM_CONST SEMICOLON IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; IDENTIFIER REL_LT NUM_CONST SEMICOLON IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; IDENTIFIER UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j UNARY_INC RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { KW_DISPLAY LEFT_PAREN STR_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { DISPLAY ( Hello ) ; RIGHT_CURLY RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { DISPLAY ( Hello ) ; } RIGHT_CURLY KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { DISPLAY ( Hello ) ; } } KW_WHILE LEFT_PAREN IDENTIFIER REL_GT NUM_CONST RIGHT_PAREN LEFT_CURLY KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { DISPLAY ( Hello ) ; } } WHILE ( x > 10 ) { KW_DISPLAY LEFT_PAREN STR_WITH_FORMAT COMMA NUM_CONST ADD_OP NUM_CONST RIGHT_PAREN SEMICOLON RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { DISPLAY ( Hello ) ; } } WHILE ( x > 10 ) { DISPLAY ( %d , 1 + 2 ) ; RIGHT_CURLY RIGHT_CURLY EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { DISPLAY ( Hello ) ; } } WHILE ( x > 10 ) { DISPLAY ( %d , 1 + 2 ) ; } } EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { DISPLAY ( Hello ) ; } } WHILE ( x > 10 ) { DISPLAY ( %d , 1 + 2 ) ; } } EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { DISPLAY ( Hello ) ; } } WHILE ( x > 10 ) { DISPLAY ( %d , 1 + 2 ) ; } } EOF 
Declaration INTEGER count ; FLOAT x , y , z ; STRING message = John ; INTEGER numbers [ 10 ] ; Function INTEGER sum ( INTEGER a , INTEGER b ) { CHARACTER a = a ; } INTEGER MAIN ( VOID ) { Input age = INPUT ( What , INTEGER ) ; Output DISPLAY ( Hello ) ; DISPLAY ( %s , message ) ; DISPLAY ( message: , message , age ) ; Assignment age = 13 ; num = 13 + 29 - 3 * 9 ; isTrue = 13 == 21 + x ; x = 5 ; y = x ; z = ( x + y == 10 ) ; x += 2 ; x ++ ; Conditional IF ( x > 0 ) { IF ( x > 0 ) { DISPLAY ( Positive ) ; } ELSE { DISPLAY ( Something ) ; } } ELSE IF ( x < 0 ) { DISPLAY ( Negative ) ; } ELSE IF ( x == 0 ) { DISPLAY ( Zero ) ; } ELSE { DISPLAY ( Any: ) ; } Iterative FOR ( INTEGER i = 0 ; i < 10 ; i ++ ) { FOR ( INTEGER j = 0 ; j < 10 ; j ++ ) { DISPLAY ( Hello ) ; } } WHILE ( x > 10 ) { DISPLAY ( %d , 1 + 2 ) ; } } EOF 
Parsing failed at token 248: END
